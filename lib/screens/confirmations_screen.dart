import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import '../models/mafile.dart';
import '../services/steam_confirmations.dart';
import '../services/debug_logger.dart';
import '../services/secure_token_manager.dart';
import '../services/steam_auth.dart';
import 'login_screen.dart';

class ConfirmationsScreen extends StatefulWidget {
  final AccountEntry account;
  final bool showAppBar;
  
  const ConfirmationsScreen({
    super.key, 
    required this.account,
    this.showAppBar = true,
  });

  @override
  State<ConfirmationsScreen> createState() => _ConfirmationsScreenState();
}

class _ConfirmationsScreenState extends State<ConfirmationsScreen> {
  List<ConfirmationItem> _confirmations = [];
  bool _isLoading = false;
  String? _error;
  Map<String, String> _cookies = {};
  bool _needsAuth = false;
  bool _isAuthenticating = false;
  late MaFile _currentMaFile;

  @override
  void initState() {
    super.initState();
    _currentMaFile = widget.account.maFile;
    _checkDataAndLoad();
  }

  Future<void> _checkDataAndLoad() async {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    try {
      final savedTokens = await SteamAuthService.loginWithSavedTokens();
      if (savedTokens != null && savedTokens['success'] == true) {
        DebugLogger.logWithTag('Confirmations', '‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º maFile —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        _currentMaFile = MaFile(
          accountName: _currentMaFile.accountName,
          sharedSecret: _currentMaFile.sharedSecret,
          identitySecret: _currentMaFile.identitySecret,
          deviceId: _currentMaFile.deviceId ?? 'android:71b6b888-50fb-41d3-8d15-0b479af53997',
          steamId: savedTokens['steamid']?.toString() ?? _currentMaFile.steamId,
          sessionId: _currentMaFile.sessionId,
          webCookie: savedTokens['webCookie']?.toString() ?? _currentMaFile.webCookie,
        );
        
        DebugLogger.logWithTag('Confirmations', '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π maFile: steamId=${_currentMaFile.steamId}, webCookie=${_currentMaFile.webCookie}');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        _loadCookies();
        _loadConfirmations();
        return;
      }
    } catch (e) {
      DebugLogger.logWithTag('Confirmations', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: $e');
    }
    
    // –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ maFile
    final missingData = <String>[];
    if (_currentMaFile.deviceId?.isEmpty ?? true) missingData.add('deviceId');
    if (_currentMaFile.steamId?.isEmpty ?? true) missingData.add('steamId');
    if (_currentMaFile.webCookie?.isEmpty ?? true) missingData.add('webCookie');
    
    if (missingData.isNotEmpty) {
      setState(() {
        _needsAuth = true;
        _error = '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: ${missingData.join(', ')}. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.';
      });
      return;
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ maFile, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    _loadCookies();
    _loadConfirmations();
  }

  Future<void> _performAuthentication() async {
    setState(() {
      _isAuthenticating = true;
      _error = null;
    });

    try {
      final result = await Navigator.of(context).push<Map<String, dynamic>>(
        MaterialPageRoute(
          builder: (_) => LoginScreen(account: widget.account),
        ),
      );

      if (result != null && result['success'] == true) {
        // –û–±–Ω–æ–≤–ª—è–µ–º maFile —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏–∏
        DebugLogger.logWithTag('Confirmations', '–û–±–Ω–æ–≤–ª—è–µ–º maFile —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: $result');
        
        final fromCache = result['from_cache'] == true;
        if (fromCache) {
          DebugLogger.logWithTag('Confirmations', '‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        } else {
          DebugLogger.logWithTag('Confirmations', 'üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
        
        _currentMaFile = MaFile(
          accountName: _currentMaFile.accountName,
          sharedSecret: _currentMaFile.sharedSecret,
          identitySecret: _currentMaFile.identitySecret,
          deviceId: result['deviceId'] ?? _currentMaFile.deviceId,
          steamId: result['steamId'] ?? _currentMaFile.steamId,
          sessionId: result['sessionId'] ?? _currentMaFile.sessionId,
          webCookie: result['webCookie'] ?? result['cookies'] ?? result['steamLoginSecure'] ?? _currentMaFile.webCookie,
        );
        DebugLogger.logWithTag('Confirmations', '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π maFile: steamId=${_currentMaFile.steamId}, webCookie=${_currentMaFile.webCookie}');
        
        setState(() {
          _needsAuth = false;
          _isAuthenticating = false;
        });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        _loadCookies();
        _loadConfirmations();
        
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. ${result['message'] ?? ''}',
                style: const TextStyle(color: Colors.white),
              ),
              backgroundColor: Colors.grey[800],
            ),
          );
        }
      } else {
        setState(() {
          _isAuthenticating = false;
          _error = '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
        });
      }
    } catch (e) {
      setState(() {
        _isAuthenticating = false;
        _error = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $e';
      });
    }
  }

  void _loadCookies() {
    // –ü–∞—Ä—Å–∏–º cookies –∏–∑ maFile
    final webCookie = _currentMaFile.webCookie;
    DebugLogger.logWithTag('Confirmations', '–ó–∞–≥—Ä—É–∂–∞–µ–º cookies –∏–∑ webCookie: $webCookie');
    
    if (webCookie != null) {
      // –ï—Å–ª–∏ —ç—Ç–æ steamLoginSecure cookie (—Ñ–æ—Ä–º–∞—Ç: steamLoginSecure=steamid||token)
      if (webCookie.startsWith('steamLoginSecure=')) {
        _cookies['steamLoginSecure'] = webCookie.substring('steamLoginSecure='.length);
        DebugLogger.logWithTag('Confirmations', '–î–æ–±–∞–≤–ª–µ–Ω steamLoginSecure cookie: ${_cookies['steamLoginSecure']}');
      } else {
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å ; —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        final cookieParts = webCookie.split(';');
        for (final part in cookieParts) {
          final trimmed = part.trim();
          if (trimmed.contains('=')) {
            final keyValue = trimmed.split('=');
            if (keyValue.length == 2) {
              _cookies[keyValue[0]] = keyValue[1];
              DebugLogger.logWithTag('Confirmations', '–î–æ–±–∞–≤–ª–µ–Ω cookie: ${keyValue[0]}=${keyValue[1]}');
            }
          }
        }
      }
    }
    
    DebugLogger.logWithTag('Confirmations', '–ò—Ç–æ–≥–æ–≤—ã–µ cookies: $_cookies');
  }

  Future<void> _loadConfirmations() async {
    setState(() {
      _isLoading = true;
      _error = null;
    });

    try {
      final confirmations = await SteamConfirmationsService.getConfirmations(
        deviceId: _currentMaFile.deviceId!,
        steamId: _currentMaFile.steamId!,
        identitySecret: _currentMaFile.identitySecret,
        cookies: _cookies,
      );

      setState(() {
        _confirmations = confirmations;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _error = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: $e';
        _isLoading = false;
      });
    }
  }

  Future<void> _acceptConfirmation(ConfirmationItem confirmation) async {
    try {
      DebugLogger.logWithTag('Confirmations', '–ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: ${confirmation.id}');
      DebugLogger.logWithTag('Confirmations', '–ò—Å–ø–æ–ª—å–∑—É–µ–º cookies: $_cookies');
      
      final success = await SteamConfirmationsService.acceptConfirmation(
        deviceId: _currentMaFile.deviceId!,
        steamId: _currentMaFile.steamId!,
        identitySecret: _currentMaFile.identitySecret,
        cookies: _cookies,
        confirmation: confirmation,
      );

      if (success) {
        DebugLogger.logWithTag('Confirmations', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: const Text(
                '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ',
                style: TextStyle(color: Colors.white),
              ),
              backgroundColor: Colors.grey[800],
            ),
          );
        }
        _loadConfirmations(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      } else {
        DebugLogger.logWithTag('Confirmations', '–û–®–ò–ë–ö–ê: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ù–ï –ø—Ä–∏–Ω—è—Ç–æ');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: const Text(
                '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
                style: TextStyle(color: Colors.white),
              ),
              backgroundColor: Colors.grey[800],
            ),
          );
        }
      }
    } catch (e) {
      DebugLogger.logWithTag('Confirmations', '–ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              '–û—à–∏–±–∫–∞: $e',
              style: const TextStyle(color: Colors.white),
            ),
            backgroundColor: Colors.grey[800],
          ),
        );
      }
    }
  }

  Future<void> _denyConfirmation(ConfirmationItem confirmation) async {
    try {
      DebugLogger.logWithTag('Confirmations', '–û—Ç–∫–ª–æ–Ω—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: ${confirmation.id}');
      DebugLogger.logWithTag('Confirmations', '–ò—Å–ø–æ–ª—å–∑—É–µ–º cookies: $_cookies');
      
      final success = await SteamConfirmationsService.denyConfirmation(
        deviceId: _currentMaFile.deviceId!,
        steamId: _currentMaFile.steamId!,
        identitySecret: _currentMaFile.identitySecret,
        cookies: _cookies,
        confirmation: confirmation,
      );

      if (success) {
        DebugLogger.logWithTag('Confirmations', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: const Text(
                '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ',
                style: TextStyle(color: Colors.white),
              ),
              backgroundColor: Colors.grey[800],
            ),
          );
        }
        _loadConfirmations(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      } else {
        DebugLogger.logWithTag('Confirmations', '–û–®–ò–ë–ö–ê: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ù–ï –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: const Text(
                '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
                style: TextStyle(color: Colors.white),
              ),
              backgroundColor: Colors.grey[800],
            ),
          );
        }
      }
    } catch (e) {
      DebugLogger.logWithTag('Confirmations', '–ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              '–û—à–∏–±–∫–∞: $e',
              style: const TextStyle(color: Colors.white),
            ),
            backgroundColor: Colors.grey[800],
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: widget.showAppBar ? AppBar(
        title: const Text('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Steam'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _isLoading ? null : _loadConfirmations,
            tooltip: '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫',
          ),
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: _clearSavedTokens,
            tooltip: '–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
          ),
          IconButton(
            icon: const Icon(Icons.delete_forever),
            onPressed: _deleteAccount,
            tooltip: '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
          ),
        ],
      ) : null,
      body: _buildBody(),
    );
  }

  Widget _buildBody() {
    if (_isLoading || _isAuthenticating) {
      return const Center(
        child: CircularProgressIndicator(),
      );
    }

    if (_needsAuth) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.login, size: 64, color: Colors.orange),
            const SizedBox(height: 16),
            Text(
              _error!,
              style: const TextStyle(fontSize: 16),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: _performAuthentication,
              icon: const Icon(Icons.login),
              label: const Text('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ),
      );
    }

    if (_error != null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.error, size: 64, color: Colors.red),
            const SizedBox(height: 16),
            Text(
              _error!,
              style: const TextStyle(fontSize: 16),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _loadConfirmations,
              child: const Text('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'),
            ),
          ],
        ),
      );
    }

    if (_confirmations.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.check_circle, size: 64, color: Colors.green),
            SizedBox(height: 16),
            Text(
              '–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π',
              style: TextStyle(fontSize: 18),
            ),
          ],
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: _confirmations.length,
      itemBuilder: (context, index) {
        final confirmation = _confirmations[index];
        return _buildConfirmationCard(confirmation);
      },
    );
  }

  Widget _buildConfirmationCard(ConfirmationItem confirmation) {
    return Card(
      margin: const EdgeInsets.only(bottom: 16),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                _buildConfirmationIcon(confirmation),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        confirmation.headline,
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Text(
                        confirmation.typeName,
                        style: TextStyle(
                          fontSize: 14,
                          color: Colors.grey[600],
                        ),
                      ),
                      Text(
                        _formatCreationTime(confirmation.creationTime),
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.grey[500],
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            if (confirmation.summary.isNotEmpty) ...[
              Text(
                '–î–µ—Ç–∞–ª–∏:',
                style: const TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 4),
              ...confirmation.summary.map((item) => Padding(
                padding: const EdgeInsets.only(left: 8, bottom: 2),
                child: _buildSummaryItem(item),
              )),
              const SizedBox(height: 12),
            ],
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () => _acceptConfirmation(confirmation),
                    icon: const Icon(Icons.check),
                    label: const Text('–ü—Ä–∏–Ω—è—Ç—å'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () => _denyConfirmation(confirmation),
                    icon: const Icon(Icons.close),
                    label: const Text('–û—Ç–∫–ª–æ–Ω–∏—Ç—å'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.red,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildConfirmationIcon(ConfirmationItem confirmation) {
    // –î–ª—è —Ç—Ä–µ–π–¥–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å URL –∏–∫–æ–Ω–∫–∏
    if (confirmation.type == ConfirmationType.trade && confirmation.icon.isNotEmpty) {
      return Container(
        width: 32,
        height: 32,
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          border: Border.all(
            color: _getConfirmationColor(confirmation.type),
            width: 2,
          ),
        ),
        child: ClipOval(
          child: CachedNetworkImage(
            imageUrl: confirmation.icon,
            width: 32,
            height: 32,
            fit: BoxFit.cover,
            placeholder: (context, url) => Container(
              color: Colors.grey[300],
              child: Icon(
                Icons.person,
                size: 16,
                color: Colors.grey[600],
              ),
            ),
            errorWidget: (context, url, error) => Icon(
              _getConfirmationIcon(confirmation.type),
              size: 32,
              color: _getConfirmationColor(confirmation.type),
            ),
          ),
        ),
      );
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
    return Icon(
      _getConfirmationIcon(confirmation.type),
      size: 32,
      color: _getConfirmationColor(confirmation.type),
    );
  }

  IconData _getConfirmationIcon(ConfirmationType type) {
    switch (type) {
      case ConfirmationType.trade:
        return Icons.swap_horiz;
      case ConfirmationType.marketSell:
        return Icons.sell;
      case ConfirmationType.phoneNumberChange:
        return Icons.phone;
      case ConfirmationType.accountRecovery:
        return Icons.security;
      case ConfirmationType.apiKeyCreation:
        return Icons.key;
      case ConfirmationType.joinSteamFamily:
        return Icons.family_restroom;
      default:
        return Icons.notification_important;
    }
  }

  Color _getConfirmationColor(ConfirmationType type) {
    switch (type) {
      case ConfirmationType.trade:
        return Colors.blue;
      case ConfirmationType.marketSell:
        return Colors.orange;
      case ConfirmationType.phoneNumberChange:
        return Colors.purple;
      case ConfirmationType.accountRecovery:
        return Colors.red;
      case ConfirmationType.apiKeyCreation:
        return Colors.green;
      case ConfirmationType.joinSteamFamily:
        return Colors.teal;
      default:
        return Colors.grey;
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ summary —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–µ–ª–∫–æ–π
  Widget _buildSummaryItem(String item) {
    IconData icon;
    Color color;
    
    if (item.toLowerCase().contains('you will give up') || 
        item.toLowerCase().contains('you will lose') ||
        item.toLowerCase().contains('–æ—Ç–¥–∞–µ—Ç–µ') ||
        item.toLowerCase().contains('–ø–æ—Ç–µ—Ä—è–µ—Ç–µ')) {
      // –ö—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –æ—Ç–¥–∞–µ–º
      icon = Icons.arrow_upward;
      color = Colors.red;
    } else if (item.toLowerCase().contains('you will receive') || 
               item.toLowerCase().contains('you will get') ||
               item.toLowerCase().contains('–ø–æ–ª—É—á–∞–µ—Ç–µ') ||
               item.toLowerCase().contains('–ø–æ–ª—É—á–∏—Ç–µ')) {
      // –ó–µ–ª–µ–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–ª—É—á–∞–µ–º
      icon = Icons.arrow_downward;
      color = Colors.green;
    } else {
      // –û–±—ã—á–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
      icon = Icons.circle;
      color = Colors.grey;
    }
    
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Icon(
          icon,
          size: 16,
          color: color,
        ),
        const SizedBox(width: 8),
        Expanded(
          child: Text(
            item,
            style: const TextStyle(fontSize: 14),
          ),
        ),
      ],
    );
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  String _formatCreationTime(int creationTime) {
    final dateTime = DateTime.fromMillisecondsSinceEpoch(creationTime * 1000);
    final now = DateTime.now();
    final difference = now.difference(dateTime);

    if (difference.inDays > 0) {
      return '${difference.inDays} –¥–Ω. –Ω–∞–∑–∞–¥';
    } else if (difference.inHours > 0) {
      return '${difference.inHours} —á. –Ω–∞–∑–∞–¥';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes} –º–∏–Ω. –Ω–∞–∑–∞–¥';
    } else {
      return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    }
  }

  /// –û—á–∏—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  Future<void> _clearSavedTokens() async {
    try {
      await SecureTokenManager.clearTokens();
      DebugLogger.logWithTag('Confirmations', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –æ—á–∏—â–µ–Ω—ã');
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Text(
              '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã',
              style: TextStyle(color: Colors.white),
            ),
            backgroundColor: Colors.grey[800],
          ),
        );
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        setState(() {
          _needsAuth = true;
          _currentMaFile = widget.account.maFile;
          _cookies = {};
          _error = '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: steamid, webCookie. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.';
        });
      }
    } catch (e) {
      DebugLogger.logWithTag('Confirmations', '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e',
              style: const TextStyle(color: Colors.white),
            ),
            backgroundColor: Colors.grey[800],
          ),
        );
      }
    }
  }

  /// –£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> _deleteAccount() async {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç "${widget.account.maFile.accountName}"?'),
            const SizedBox(height: 16),
            const Text(
              '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            const Text('‚Ä¢ –í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'),
            const Text('‚Ä¢ –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ Steam'),
            const Text('‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞'),
            const SizedBox(height: 16),
            const Text(
              '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!',
              style: TextStyle(
                color: Colors.red,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
            ),
            child: const Text('–£–¥–∞–ª–∏—Ç—å'),
          ),
        ],
      ),
    );

    if (confirmed != true) return;

    try {
      DebugLogger.logWithTag('Confirmations', '–£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç: ${widget.account.maFile.accountName}');
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
      await SecureTokenManager.clearTokens();
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setState(() {
        _confirmations.clear();
        _cookies.clear();
        _needsAuth = true;
        _error = '–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.';
      });
      
      DebugLogger.logWithTag('Confirmations', '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              '–ê–∫–∫–∞—É–Ω—Ç "${widget.account.maFile.accountName}" —É–¥–∞–ª–µ–Ω',
              style: const TextStyle(color: Colors.white),
            ),
            backgroundColor: Colors.red,
          ),
        );
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç–∫—Ä–∞–Ω—É
        Navigator.of(context).pop();
      }
    } catch (e) {
      DebugLogger.logWithTag('Confirmations', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: $e',
              style: const TextStyle(color: Colors.white),
            ),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
}
